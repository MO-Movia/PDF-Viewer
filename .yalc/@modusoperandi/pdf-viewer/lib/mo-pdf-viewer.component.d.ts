import { ComponentFactoryResolver, Injector, ApplicationRef, ElementRef, OnDestroy, Renderer2, OnInit } from '@angular/core';
import { NgxExtendedPdfViewerComponent } from 'ngx-extended-pdf-viewer';
import { CommentTagEvent, ShowCommentTagPopoverDetails, showhighlightedArrayEvent } from 'ngx-extended-pdf-viewer/lib/events/annotation-editor-layer-event';
import { TagPopoverComponent } from './tag-popover/tag-popover.component';
import { UtilService } from './util.service';
import { Comment } from './util.service';
import { CommentSelection } from './models/comment-selection.model';
import * as i0 from "@angular/core";
export declare class MoPdfViewerComponent implements OnDestroy, OnInit {
    private resolver;
    private injector;
    private appRef;
    private elementRef;
    utilService: UtilService;
    renderer: Renderer2;
    pdfSrc: string | Uint8Array;
    documentTitle: string;
    documentClassification: string;
    documentAuthor: string;
    minimalView: boolean;
    tagListPublic: string[];
    tagListPrivate: string[];
    commentList: Comment[];
    isOpenTag: boolean;
    isOpenComment: boolean;
    publicListVisible: boolean;
    privateListVisible: boolean;
    isHovered: boolean;
    highlightText: string | undefined;
    commentTextArray: string[];
    textType: string | undefined;
    pdfComponent: NgxExtendedPdfViewerComponent;
    tagPopoverComponent: TagPopoverComponent;
    ngOnInit(): void;
    private popoverRef;
    private commentDetails;
    private tagDetails;
    private previousScrollTop;
    private previousScrollLeft;
    highlightList: string[];
    dropdownVisible: any;
    hoveredList: 'private' | 'public' | null | 'highlight';
    hoveredIndex: number | null;
    constructor(resolver: ComponentFactoryResolver, injector: Injector, appRef: ApplicationRef, elementRef: ElementRef, utilService: UtilService, renderer: Renderer2);
    NodeObjectArray(): void;
    I: {
        faFile: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faUser: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faSliders: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faBookOpenReader: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faMessage: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faQuoteRight: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faArrowTrendUp: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faThumbsUp: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faTag: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faTrash: import("@fortawesome/fontawesome-common-types").IconDefinition;
        faHighlighter: import("@fortawesome/fontawesome-common-types").IconDefinition;
    };
    searchCategories: {
        label: string;
        icon: import("@fortawesome/fontawesome-common-types").IconDefinition;
    }[];
    selectedSearchCategory: string;
    selectSearchCategory(category: string): void;
    showHighlightedArray(data: showhighlightedArrayEvent): void;
    commentTagPopover(data: ShowCommentTagPopoverDetails): void;
    showTagPopover(tagDetails: CommentTagEvent): void;
    showCommentPopover(commentDetails: CommentTagEvent): void;
    onDocumentClickTag: (event: MouseEvent) => void;
    onDocumentClickComment: (event: MouseEvent) => void;
    scrollToText(highlight: string): void;
    onPdfViewerScroll: () => void;
    closeCommentPopover(): void;
    commntDropdownVisible(element: HTMLElement): void;
    enableSubmitButton(comment: CommentSelection, submitButton: HTMLButtonElement): void;
    submitComment(comment: CommentSelection, submitButton: HTMLButtonElement): void;
    editComment(comment: CommentSelection): void;
    removeComment(comment: Comment): void;
    removeTag(type: 'public' | 'private', index: number): void;
    closeCommentTextarea(comment: CommentSelection): void;
    tagPublicVisibility(): void;
    tagPrivateVisibility(): void;
    showMenu(comment: Comment): void;
    hideMenu(comment: Comment): void;
    onMouseEnter(list: 'private' | 'public' | 'highlight', index: number): void;
    onMouseLeave(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MoPdfViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MoPdfViewerComponent, "mo-pdf-viewer", never, { "pdfSrc": { "alias": "pdfSrc"; "required": true; }; "documentTitle": { "alias": "documentTitle"; "required": false; }; "documentClassification": { "alias": "documentClassification"; "required": false; }; "documentAuthor": { "alias": "documentAuthor"; "required": false; }; "minimalView": { "alias": "minimalView"; "required": false; }; }, {}, never, never, true, never>;
}
